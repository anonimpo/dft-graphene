#!/bin/bash

# Script to run energy cutoff convergence tests for multilayer graphene systems
# Usage: ./run_ecut_tests.sh [OPTIONS] <stacking_type> <num_layers> <num_cpus>
# Options:
#   -c, --custom-ecut "VALUES" : Specify custom space-separated ecut values (e.g., "30 40 50")
#   -p, --plot                 : Plot the results after calculations using plot_ecut.py
# Example: ./run_ecut_tests.sh -c "50 60 70" -p AA 2 4

# --- Option Parsing ---
custom_ecut=""
plot_flag=0

# Define options
SHORT_OPTS="c:p"
LONG_OPTS="custom-ecut:,plot"

# Parse options
PARSED_OPTIONS=$(getopt -o $SHORT_OPTS --long $LONG_OPTS -n "$0" -- "$@")
if [ $? -ne 0 ]; then
    echo "Error parsing options."
    exit 1
fi
eval set -- "$PARSED_OPTIONS"

# Extract options and their arguments into variables
while true; do
    case "$1" in
        -c|--custom-ecut)
            custom_ecut="$2"
            shift 2
            ;;
        -p|--plot)
            plot_flag=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Internal error!"
            exit 1
            ;;
    esac
done

# Check if the required positional arguments are provided
if [ $# -lt 3 ]; then
  echo "Error: Not enough positional arguments provided."
  echo "Usage: $0 [OPTIONS] <stacking_type> <num_layers> <num_cpus>"
  echo "Example: $0 -p AA 2 4"
  exit 1
fi

# Assign positional arguments
stacking=$1
layers=$2
cpu=$3
# --- End Option Parsing ---

# Define the directory for this specific test
if [ "$stacking" = "1L" ]; then
  # For monolayer, use a simpler path
  test_dir="./1L"
else
  # For multilayer, use stacking/layersL structure
  test_dir="./${stacking}/${layers}L"
fi

# Check if the directory exists
if [ ! -d "$test_dir" ]; then
  echo "Error: Test directory $test_dir does not exist"
  exit 1
fi

# Create a results directory
mkdir -p "$test_dir/results"

# Values of ecutwfc to test

if [ -n "$custom_ecut" ]; then
  # Use custom values if provided
  read -r -a ecut_values <<< "$custom_ecut"
  echo "Using custom ecut values: ${ecut_values[@]}"
else
  # Default values
  ecut_values=(20 22 24 26 30 35 40 45 50 55 60 65 70 75 80)
  echo "Using default ecut values: ${ecut_values[@]}"
fi

# Loop through each value and run the calculation
for ecut in "${ecut_values[@]}"; do
  echo "Running calculation for ecut = $ecut Ry"
  
  # Create a temporary input file with the current ecut value
  sed "s/ECUT_VALUE/$ecut/g" "$test_dir/template.in" > "$test_dir/scf_${ecut}.in"
  
  # Run the calculation
  echo "mpirun -np $cpu pw.x < $test_dir/scf_${ecut}.in > $test_dir/results/scf_${ecut}.out"
  mpirun -np $cpu pw.x < "$test_dir/scf_${ecut}.in" > "$test_dir/results/scf_${ecut}.out" 2>&1
  
  # Extract total energy - using more flexible pattern
  total_energy=$(grep "!\s*total energy\s*=" "$test_dir/results/scf_${ecut}.out" | tail -1 | awk '{print $5}')
  
  # Save to a summary file
  echo "$ecut  $total_energy" >> "$test_dir/results/ecut_vs_energy.dat"
  
  echo "Completed ecut = $ecut Ry, Total energy = $total_energy Ry"
  echo "------------------------------------"
done

echo "All calculations completed. Results saved in $test_dir/results/ecut_vs_energy.dat"

# --- Plotting ---
if [ $plot_flag -eq 1 ]; then
  plot_script="./plot_ecut.py" # Assuming the script is in the current directory
  results_file="$test_dir/results/ecut_vs_energy.dat"
  output_plot="$test_dir/results/ecut_convergence.png"

  if [ -f "$plot_script" ]; then
    echo "Plotting results..."
    python "$plot_script" "$results_file" "$output_plot"
    if [ $? -eq 0 ]; then
      echo "Plot saved to $output_plot"
    else
      echo "Error running plotting script."
    fi
  else
    echo "Warning: Plotting script $plot_script not found. Skipping plotting."
  fi
else
  echo "To plot the results manually, run: python plot_ecut.py $test_dir/results/ecut_vs_energy.dat $test_dir/results/ecut_convergence.png"
fi
# --- End Plotting ---

